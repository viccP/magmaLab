/*
 * This file is generated by jOOQ.
*/
package com.jlu.magmalab.dao.tables;


import com.jlu.magmalab.dao.Indexes;
import com.jlu.magmalab.dao.Keys;
import com.jlu.magmalab.dao.System;
import com.jlu.magmalab.dao.tables.records.TmUserRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TmUser extends TableImpl<TmUserRecord> {

    private static final long serialVersionUID = 739573624;

    /**
     * The reference instance of <code>system.tm_user</code>
     */
    public static final TmUser TM_USER = new TmUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TmUserRecord> getRecordType() {
        return TmUserRecord.class;
    }

    /**
     * The column <code>system.tm_user.user_id</code>. 用户id
     */
    public final TableField<TmUserRecord, String> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "用户id");

    /**
     * The column <code>system.tm_user.login_id</code>. 登录id
     */
    public final TableField<TmUserRecord, String> LOGIN_ID = createField("login_id", org.jooq.impl.SQLDataType.VARCHAR(40).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "登录id");

    /**
     * The column <code>system.tm_user.password</code>. 密码
     */
    public final TableField<TmUserRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "密码");

    /**
     * The column <code>system.tm_user.user_name</code>. 用户名
     */
    public final TableField<TmUserRecord, String> USER_NAME = createField("user_name", org.jooq.impl.SQLDataType.VARCHAR(100), this, "用户名");

    /**
     * The column <code>system.tm_user.sex</code>. 性别&gt;1:男 0:女
     */
    public final TableField<TmUserRecord, Integer> SEX = createField("sex", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "性别>1:男 0:女");

    /**
     * The column <code>system.tm_user.phone_no</code>. 电话号码
     */
    public final TableField<TmUserRecord, String> PHONE_NO = createField("phone_no", org.jooq.impl.SQLDataType.VARCHAR(21), this, "电话号码");

    /**
     * The column <code>system.tm_user.memo</code>. 备注
     */
    public final TableField<TmUserRecord, String> MEMO = createField("memo", org.jooq.impl.SQLDataType.VARCHAR(500), this, "备注");

    /**
     * The column <code>system.tm_user.upd_time</code>. 更新时间
     */
    public final TableField<TmUserRecord, Timestamp> UPD_TIME = createField("upd_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "更新时间");

    /**
     * The column <code>system.tm_user.pwd_status</code>. 密码状态&gt;1:已经修改 0:初始密码
     */
    public final TableField<TmUserRecord, Integer> PWD_STATUS = createField("pwd_status", org.jooq.impl.SQLDataType.INTEGER, this, "密码状态>1:已经修改 0:初始密码");

    /**
     * Create a <code>system.tm_user</code> table reference
     */
    public TmUser() {
        this(DSL.name("tm_user"), null);
    }

    /**
     * Create an aliased <code>system.tm_user</code> table reference
     */
    public TmUser(String alias) {
        this(DSL.name(alias), TM_USER);
    }

    /**
     * Create an aliased <code>system.tm_user</code> table reference
     */
    public TmUser(Name alias) {
        this(alias, TM_USER);
    }

    private TmUser(Name alias, Table<TmUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private TmUser(Name alias, Table<TmUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return System.SYSTEM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TM_USER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TmUserRecord> getPrimaryKey() {
        return Keys.KEY_TM_USER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TmUserRecord>> getKeys() {
        return Arrays.<UniqueKey<TmUserRecord>>asList(Keys.KEY_TM_USER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TmUser as(String alias) {
        return new TmUser(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TmUser as(Name alias) {
        return new TmUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TmUser rename(String name) {
        return new TmUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TmUser rename(Name name) {
        return new TmUser(name, null);
    }
}
